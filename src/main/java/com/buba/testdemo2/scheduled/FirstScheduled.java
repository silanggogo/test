package com.buba.testdemo2.scheduled;import org.springframework.context.annotation.Configuration;import org.springframework.scheduling.annotation.Scheduled;/** * @author 四郎 * @date 2019/11/14 - 9:34 * * cron表达式：不是spring框架提供的，很多的定时任务技术都是用的cron表达式 *             格式：cron = "* * * * * * *"  参数之间用空格隔开 *                         秒 分 时 天 月 周 * cron表达式标准使用这种六节的格式，一般不使用七节的（最后加一个【年】） * 参数： *表示任意值（任意秒/分/时/...） *        ,表示一个列表值，如在【秒】字段中使用“5,6,7”，表示第5秒6秒7秒； *        -表示一个范围，如在【秒】字段中使用“5-7”，表示第5到7秒 *        /表示从a值开始每b值执行一次，如在【秒】中使用“5/3”，表示从第5秒开始，每3秒执行一次 *        ?表示所在字段什么都没有，与*意义相反 * 定时任务里面出现异常是运行定时任务的线程出现了异常，跟定时任务无关。 * 如果出现阻塞或者延迟崩溃等现象会直接影响定时任务的执行 * scheduled:定时任务优点：开发简单，运行效率高， *                   缺点：不适合在高并发环境，请求量大，分布式环境。容易引起阻塞或者延迟崩溃等现象。 * */@Configuration  //交给spring管理public class FirstScheduled {    @Scheduled(cron="5-45 * * * * *")    public void testScheduled(){//        int a = new Random().nextInt();//        if(a % 3 == 0){//            throw new RuntimeException("请停止你的行为！");//        }//        try {//            Thread.sleep(3000);//        } catch (InterruptedException e) {//            e.printStackTrace();//        }        //System.out.println("定时任务正在进行中:"+new Date());    }}